<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.dsvellal</groupId>
  <artifactId>calendar.data.processing</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>jar</packaging>
  <name>calendar.data.processing</name>
  <url>http://maven.apache.org</url>
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <java.version>17</java.version>
    <jacoco.line.coverage>1.0</jacoco.line.coverage>
    <jacoco.branch.coverage>1.0</jacoco.branch.coverage>
    <jacoco.missed.class.count>0</jacoco.missed.class.count>
    <mutation.threshold>100</mutation.threshold>
    <method.cyclomatic.complexity.count>3</method.cyclomatic.complexity.count>
    <pmd.max.violation>0</pmd.max.violation>
    <cpd.duplicate.token>20</cpd.duplicate.token>
    <cpd.max.violation>0</cpd.max.violation>
    <checkstyle.max.violation>0</checkstyle.max.violation>
    <spotbugs.max.violation>0</spotbugs.max.violation>
  </properties>
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.13.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <build>
    <plugins>
      <!-- Fail the build on any compiler warnings detected -->
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <version>2.2.5.RELEASE</version>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.1</version>
        <configuration>
          <encoding>UTF-8</encoding>
          <source>${java.version}</source>
          <target>${java.version}</target>
          <fork>true</fork>
          <compilerArgs>
            <arg>-Xlint:all</arg>
            <arg>-Werror</arg>
          </compilerArgs>
          <showWarnings>true</showWarnings>
          <showDeprecation>true</showDeprecation>
        </configuration>
        <executions>
          <execution>
            <id>compile</id>
            <phase>process-sources</phase>
            <goals>
              <goal>compile</goal>
            </goals>
            <configuration>
              <compilerArgument>-Xlint:-processing</compilerArgument>
              <failOnWarning>true</failOnWarning>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- Fail the build if any dependency analysis warnings are encountered -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>3.2.0</version>
        <executions>
          <execution>
            <id>analyze</id>
            <goals>
              <goal>analyze-only</goal>
            </goals>
            <configuration>
              <failOnWarning>true</failOnWarning>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- Fail the build on any PMD violations & if duplicates are detected 
        with specified min tokens -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-pmd-plugin</artifactId>
        <version>3.15.0</version>
        <configuration>
          <linkXRef>false</linkXRef>
          <sourceEncoding>UTF-8</sourceEncoding>
          <printFailingErrors>true</printFailingErrors>
          <minimumTokens>${cpd.duplicate.token}</minimumTokens>
          <targetJdk>${java.required.version}</targetJdk>
          <rulesets>
            <ruleset>configs/custom_pmd.xml</ruleset>
          </rulesets>
        </configuration>
        <!-- separate execution for cpd and pmd to have seprate max violation 
          count for cpd and pmd -->
        <executions>
          <execution>
            <id>pmd-cpd</id>
            <phase>verify</phase>
            <configuration>
              <maxAllowedViolations>${cpd.max.violation}</maxAllowedViolations>
            </configuration>
            <goals>
              <goal>cpd</goal>
              <goal>cpd-check</goal>
            </goals>
          </execution>
          <execution>
            <id>pmd-check</id>
            <phase>verify</phase>
            <configuration>
              <maxAllowedViolations>${pmd.max.violation}</maxAllowedViolations>
            </configuration>
            <goals>
              <goal>pmd</goal>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- Fail the build if more than 100% of mutants are not killed! -->
      <plugin>
        <groupId>org.pitest</groupId>
        <artifactId>pitest-maven</artifactId>
        <version>1.7.3</version>
        <executions>
          <execution>
            <id>pit-report</id>
            <phase>test</phase>
            <goals>
              <goal>mutationCoverage</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <targetClasses>
            <param>com.dsvellal*</param>
          </targetClasses>
          <targetTests>
            <param>com.dsvellal*</param>
          </targetTests>
          <mutationThreshold>${mutation.threshold}</mutationThreshold>
        </configuration>
      </plugin>
      <!-- Fail the build if per-class line coverage is not 100%, if per-class 
        branch coverage is not 100%, if per-method cyclomatic complexity > 3, and 
        if any class exists without a corresponding unit-test case! -->
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>0.8.7</version>
        <executions>
          <execution>
            <id>prepare-agent</id>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <execution>
            <id>report</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>report</goal>
            </goals>
          </execution>
          <execution>
            <id>post-unit-test</id>
            <phase>test</phase>
            <goals>
              <goal>report</goal>
            </goals>
            <configuration>
              <!-- Sets the path to the file which contains the execution data. -->
              <dataFile>target/jacoco.exec</dataFile>
              <!-- Sets the output directory for the code coverage report. -->
              <outputDirectory>target/jacoco-ut</outputDirectory>
            </configuration>
          </execution>
          <execution>
            <id>check</id>
            <goals>
              <goal>check</goal>
            </goals>
            <configuration>
              <rules>
                <rule>
                  <element>CLASS</element>
                  <limits>
                    <limit>
                      <counter>LINE</counter>
                      <value>COVEREDRATIO</value>
                      <minimum>${jacoco.line.coverage}</minimum>
                    </limit>
                  </limits>
                </rule>
                <rule>
                  <element>CLASS</element>
                  <limits>
                    <limit>
                      <counter>BRANCH</counter>
                      <value>COVEREDRATIO</value>
                      <minimum>${jacoco.branch.coverage}</minimum>
                    </limit>
                  </limits>
                </rule>
                <rule>
                  <element>BUNDLE</element>
                  <limits>
                    <limit implementation="org.jacoco.report.check.Limit">
                      <counter>CLASS</counter>
                      <value>MISSEDCOUNT</value>
                      <maximum>${jacoco.missed.class.count}</maximum>
                    </limit>
                  </limits>
                </rule>
                <rule>
                  <element>METHOD</element>
                  <limits>
                    <limit>
                      <counter>COMPLEXITY</counter>
                      <value>TOTALCOUNT</value>
                      <maximum>${method.cyclomatic.complexity.count}</maximum>
                    </limit>
                  </limits>
                </rule>
              </rules>
            </configuration>
          </execution>
        </executions>
        <configuration>
          <systemPropertyVariables>
            <jacoco-agent.destfile>target/jacoco.exec</jacoco-agent.destfile>
          </systemPropertyVariables>
        </configuration>
      </plugin>
      <!-- Fail build on spot-bugs error -->
      <plugin>
        <groupId>com.github.spotbugs</groupId>
        <artifactId>spotbugs-maven-plugin</artifactId>
        <version>4.5.3.0</version>
        <configuration>
          <effort>Max</effort>
          <threshold>Low</threshold>
          <xmlOutput>true</xmlOutput>
          <failOnError>true</failOnError>
          <findbugsXmlOutputDirectory>${project.build.directory}/findbugs</findbugsXmlOutputDirectory>
          <maxAllowedViolations>${spotbugs.max.violation}</maxAllowedViolations>
        </configuration>
        <executions>
          <!-- Ensures that FindBugs inspects source code when project is compiled. -->
          <execution>
            <id>analyze-compile</id>
            <phase>check</phase>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- Checkstyle checks -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <version>3.1.2</version>
        <configuration>
          <configLocation>configs/google_check.xml</configLocation>
          <encoding>UTF-8</encoding>
          <consoleOutput>true</consoleOutput>
          <failsOnError>true</failsOnError>
          <linkXRef>false</linkXRef>
          <maxAllowedViolations>${checkstyle.max.violation}</maxAllowedViolations>
        </configuration>
        <executions>
          <execution>
            <id>validate</id>
            <phase>check</phase>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  <reporting>
    <plugins>
      <plugin>
        <groupId>com.github.spotbugs</groupId>
        <artifactId>spotbugs-maven-plugin</artifactId>
        <version>4.5.3.0</version>
        <configuration>
          <xmlOutput>true</xmlOutput>
          <xmlOutputDirectory>target/site</xmlOutputDirectory>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <version>3.1.2</version>
        <reportSets>
          <reportSet>
            <reports>
              <report>checkstyle</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>
    </plugins>
  </reporting>
</project>
